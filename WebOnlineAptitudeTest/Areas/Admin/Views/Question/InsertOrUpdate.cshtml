@model WebOnlineAptitudeTest.Models.Entities.Question

@{
    ViewBag.Title = "InsertOrUpdate";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";


}



@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <div class="">
            @Html.LabelFor(model => model.CategoryExamId, "CategoryExam Name", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="">
                @Html.DropDownList("CategoryExamId", (SelectList)ViewBag.NewsItemList, htmlAttributes: new { @class = "form-control", Name = "question.CategoryExamId" })
                @Html.ValidationMessageFor(model => model.CategoryExamId, "", new { @class = "text-danger" })
            </div>
        </div>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)



        <div class="form-group">
            <div class="card">
                <div class="card-body question-content">
                    <div class="card-title d-flex">
                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })

                        <div class="d-flex" style="">
                            <div class="pl-2 pr-2 box">
                                @Html.EditorFor(model => model.Mark, new { htmlAttributes = new { @class = "form-control", Name = "question.Mark" } })

                                @Html.ValidationMessageFor(model => model.Mark, "", new { @class = "text-danger", data_valmsg_for = "question.Mark" })
                            </div>
                        </div>
                        @Html.LabelFor(model => model.Mark, htmlAttributes: new { @class = "control-label" })
                        <div class="question-enable ml-auto">
                            <label class="switch">

                                @if (Model != null)
                                {
                                    <input type="checkbox" @(Model.Status == true ? "checked" : "" ) name="question.Status" value="true">
                                }
                                else
                                {
                                    <input type="checkbox" checked name="question.Status" value="true">
                                }

                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>
                    <div class="">
               
                        <div class="form-control question summernote" id="question">@if (Model != null)
                            {
                                @Html.Raw(@Model.Name);
                            }</div>

                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = " messager" })
                </div>

            </div>
        </div>
    </div>
    <div class="form-group">
        <div class="card">
            <div class="card-body">
                <div class="anwser">
                    @if (Model == null || Model.Answers == null)
                    {


                        <div class="anwser-content anwser-first">
                            <input type="number" name="question.Answers[0].AnswerInQuestion" class="AnswerInQuestion" hidden value="1" />

                            <div class="answer-tool d-flex mb-2">
                                <div class="card-title ">
                                    @Html.LabelFor(model => model.Answers.FirstOrDefault().Name, htmlAttributes: new { @class = "control-label" })
                                    <span>1</span>
                                </div>
                                <div class="anwser-correct-check">
                                    <div class="custom-control custom-checkbox cursor-pointer">
                                        <input type="checkbox" class="custom-control-input anwser-correct" value="true" name="question.Answers[0].Correct" id="anwser_correct_1">
                                        <label class="custom-control-label anwser-correct-label  cursor-pointer" for="anwser_correct_1">
                                            <span> is Correct</span>
                                        </label>
                                    </div>
                                </div>
                                <div class="remove-answer ml-auto">
                                    <button class="btn btn-rounded btn-danger btn-sm" type="button">Remove answer</button>
                                </div>
                            </div>

                            <div class="">
                                <div class="form-control summernote text-box multi-line" name="question.Answers[0].Name"></div>
                                @Html.ValidationMessageFor(model => model.Answers.FirstOrDefault().Name, "", new { @class = "text-danger messager" })
                            </div>
                        </div>



                    }
                    else
                    {
                        int i = 0;
                        foreach (var aw in Model.Answers)
                        {

                            <div class="anwser-content anwser-first">
                                <input type="text" hidden value="@aw.Id" class="AnswerId" name="question.Answers[@i].Id" id="@aw.Id">
                                <input type="number" name="question.Answers[@i].AnswerInQuestion" class="AnswerInQuestion" hidden value="@aw.AnswerInQuestion" />
                                <span class="count-answer " hidden>@i</span>


                                <div class="answer-tool d-flex mb-2">
                                    <div class="card-title ">
                                        @Html.LabelFor(model => model.Answers.FirstOrDefault().Name, htmlAttributes: new { @class = "control-label" })
                                        <span>@aw.AnswerInQuestion</span>
                                    </div>
                                    <div class="anwser-correct-check">
                                        <div class="custom-control custom-checkbox cursor-pointer">
                                            <input type="checkbox" @( aw.Correct == true ? "checked" : "" ) class="custom-control-input anwser-correct" value="true" name="question.Answers[@i].Correct" id="anwser_correct_@i">
                                            <label class="custom-control-label anwser-correct-label  cursor-pointer" for="anwser_correct_@i">
                                                <span> is Correct</span>
                                            </label>
                                        </div>
                                    </div>
                                    <div class="remove-answer ml-auto">
                                        <button class="btn btn-rounded btn-danger btn-sm" type="button">Remove answer</button>
                                    </div>
                                </div>

                                <div class="">
                                    <div class="form-control summernote text-box multi-line">@Html.Raw(aw.Name)</div>


                                    @Html.ValidationMessageFor(model => model.Answers.FirstOrDefault().Name, "", new { @class = "text-danger messager" })
                                </div>
                            </div>
                            { i++; }
                        }
                    }
                </div>
                <button class="btn btn-warning" id="add_more" type="button"> Add more answer.... </button>

            </div>

        </div>
    </div>


    <div class="form-group">
        <div class="form-row">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" class="btn waves-effect btn-Custom waves-light btn-primary" value="Save Change" />
                <a href='@Url.Action("Index","Question")' class="btn waves-effect btn-Custom waves-light btn-danger" >Cancel</a>

            </div>

        </div>
    </div>

</div>
}


@section Scripts {
    <script>


        let anwserCount = 1;



        $(document).ready(function () {




            let answerTarget = $(".anwser-content").first().clone();
            answerTarget.find(".summernote").html('');
            answerTarget.find(".AnswerId").val('0');


            $('.summernote').summernote({
                placeholder: 'Enter content....',
                tabsize: 2,
                height: 100,
                minHeight: 100,
                focus: true,
                toolbar: [
                    ['style', ['bold', 'italic', 'underline', 'clear']],
                    ['fontsize', ['fontsize']]
                ]
            });



            $(".question-content").find(".note-codable").attr("name", "question.Name");

            $(".anwser-content").each(function (index, element) {
                console.log(index);
                $(element).find(".note-codable").attr("name", "question.Answers[" + index + "].Name");
            });



            $("#add_more").on("click", function () {
                anwserCount = $(".anwser-content").length;
                anwserCount += 1;

                let anwserClone = answerTarget.clone();

                

                anwserClone.find(".summernote").summernote({
                    placeholder: 'Enter content....',
                    tabsize: 2,
                    height: 100,
                    minHeight: 100,
                    focus: true,
                    toolbar: [
                        ['style', ['bold', 'italic', 'underline', 'clear']],
                        ['fontsize', ['fontsize']]
                    ]
                });

                changeControl(anwserClone, anwserCount);

                anwserClone.appendTo(".anwser").show();

                $("html, body").animate({
                    scrollTop: $(
                        'html, body').get(0).scrollHeight
                }, 700);


            });

            $(".anwser").on("click", ".remove-answer", function () {

                var answer = $(this).closest(".anwser-content");

                answer.css("animation", ".5s ease-out 0s 1 slideInFromRight");
                


                setTimeout(function () { answer.css("animation", ".2s ease-out 0s 1 heightToZero") }, 500);

                setTimeout(function () {
                    answer.remove();
                    $(".anwser-content").each(function (index, element) {
                        changeControl($(element), index + 1);
                    });
                }, 700);


            });


            $("form").submit(function () {
                // Let's find the input to check
                var $contents = $(this).find(".note-editable");

                var emptyAns = false;

                $contents.each(function (index) {
                    $contentAnswer = $(this);
                    $contentAnswer.find("script").remove();

                    $noteHtml = $(this).html();

                    if ($noteHtml.length <= 0 || $noteHtml == "<p><br></p>") {
                        emptyAns = true;
                        if (index <= 0) {
                            $contentAnswer.closest(".question-content").find(".messager").html("The Questtion field is required.");

                        } else {
                            $contentAnswer.closest(".anwser-content").find(".messager").html("The Answer field is required.");

                        }

                    }
                    else {
                        if (index <= 0) {
                            $contentAnswer.closest(".question-content").find(".messager").html("");

                        } else {
                            $contentAnswer.closest(".anwser-content").find(".messager").html("");

                        }
                    }

                    $noteHtmlNoBreak = $noteHtml.replace(/(\r\n|\n|\r)/gm, "");
 
                    $(this).parent().find(".note-codable").val($noteHtmlNoBreak);

                });
                if (emptyAns == true) {
                    return false;
                }

            });



            //function htmlencode(str) {
            //    return str.replace(/[&<>"']/g, function ($0) {
            //        return "&" + { "&": "amp", "<": "lt", ">": "gt", '"': "quot", "'": "#39" }[$0] + ";";
            //    });
            //}

            function changeControl(element, count) {

                element.find(".card-title").find("span").html(count);

             /*   element.find(".summernote.text-box").attr("name", "question.Answers[" + (count - 1) + "].Name");*/
                element.find(".anwser-correct").attr("name", "question.Answers[" + (count - 1) + "].Correct");
                element.find(".AnswerInQuestion").attr("name", "question.Answers[" + (count - 1) + "].AnswerInQuestion");
                element.find(".AnswerId").attr("name", "question.Answers[" + (count - 1) + "].Id");
                element.find(".note-codable").attr("name", "question.Answers[" + (count - 1) + "].Name");


                element.find(".AnswerInQuestion").attr("value", count);
                element.find(".anwser-correct").attr("id", "anwser_correct_" + count);
                element.find(".anwser-correct-label").attr("for", "anwser_correct_" + count);
                //element.find(".note-codable").attr("disabled", "disabled");
                element.css("animation", ".5s ease-out 0s 1 slideInFromLeft");
            }

     

        });
    </script>

}
