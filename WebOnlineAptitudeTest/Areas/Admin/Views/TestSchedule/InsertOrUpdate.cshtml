@model WebOnlineAptitudeTest.Areas.Admin.Data.Model.TestSchedules.TestScheduleInsertOrUpdateRequest

@{
    ViewBag.Title = (Model == null ? "Add New Test Schedule" : " Test Schedule Edit");
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
}

@section Breadcrumb{
    <div class="page-breadcrumb">
        <div class="row">
            <div class="col-7 align-self-center">
                <h3 class="page-title text-truncate text-dark font-weight-medium mb-1">@(Model == null ? "Add New Test Schedule" : "Test Schedule Edit")</h3>
                <div class="d-flex align-items-center">
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb m-0 p-0">
                            <li class="breadcrumb-item"><a href="/admin" class="text-muted">Home</a></li>
                            <li class="breadcrumb-item text-muted active" aria-current="page"><a href="/Admin/TestSchedule" class="text-muted">Test Schedule</a></li>
                            <li class="breadcrumb-item text-muted active" aria-current="page">@(Model == null ? "Add New Test Schedule" : "Test Schedule Edit")</li>
                        </ol>
                    </nav>
                </div>
            </div>
        </div>
    </div>
}

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                @using (Html.BeginForm("InsertOrUpdate", "TestSchedule", FormMethod.Post, new { onsubmit = "myFunctionSubmit()" }))
                {
                    @Html.AntiForgeryToken()

                    if (Model == null)
                    {
                        <input type="hidden" name="Id" value="0" />
                    }
                    else
                    {
                        @Html.HiddenFor(model => model.Id)
                    }
                    <div class="form-group">
                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>

                    if (Model == null)
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.DateStart, htmlAttributes: new { @class = "control-label" })
                            @Html.TextBox("DateStart", null, new { type = "datetime-local", @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.DateStart, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.DateEnd, htmlAttributes: new { @class = "control-label" })
                            @Html.TextBox("DateEnd", null, new { type = "datetime-local", @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.DateEnd, "", new { @class = "text-danger" })
                        </div>
                    }
                    else
                    {
                        <div class="form-group">
                            @Html.LabelFor(model => model.DateStart, htmlAttributes: new { @class = "control-label" })
                            @Html.TextBox("DateStart", Model.DateStart.ToString("yyyy-MM-dd HH:mm:ss").Replace(' ', 'T'), new { type = "datetime-local", @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.DateStart, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.DateEnd, htmlAttributes: new { @class = "control-label" })
                            @Html.TextBox("DateEnd", Model.DateEnd.ToString("yyyy-MM-dd HH:mm:ss").Replace(' ', 'T'), new { type = "datetime-local", @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.DateEnd, "", new { @class = "text-danger" })
                        </div>
                    }

                    <div class="form-group">
                        @Html.LabelFor(model => model.CandidateId, htmlAttributes: new { @class = "control-label" })
                        @Html.ListBoxFor(model => model.CandidateId, ViewBag.NewsItemList as MultiSelectList, htmlAttributes: new { @class = "form-control", size = "5", multiple = "multiple" })
                        @Html.ValidationMessageFor(model => model.CandidateId, "", new { @class = "text-danger" })
                    </div>

                    <div class="text-right mt-5">
                        <a href="@Url.Action("Index", "TestSchedule")" class=" btn waves-effect btn-Custom waves-light btn-danger">Cancel</a>
                        <button type="submit" class="btn waves-effect btn-Custom waves-light btn-primary btnSaveChange">Save Change</button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>
@section Scripts{
    @*<script>
            $(document).ready(function () {
                var startDateObj = document.getElementById('TestStartSchedule');
                document.getElementById("TestEndSchedule").disabled = true;
                //document.getElementById("TestEndSchedule").readOnly = true;

                startDateObj.onblur = function () {
                    var timeTest = $('#TimeTest').val();
                    var timeTestStartDate = $(this).val();
                    setDateTimeToTestEndSchedule(timeTestStartDate, timeTest);
                };

                $('#TimeTest').off('input').on('input', function () {
                    var timeTest = $(this).val();
                    var timeTestStartDate = $('#TestStartSchedule').val();
                    setDateTimeToTestEndSchedule(timeTestStartDate, timeTest);
                });

                $('.btnSaveChange').off('input').on('input', function () {
                    var timeTest = $(this).val();
                    var timeTestStartDate = $('#TestStartSchedule').val();
                    setDateTimeToTestEndSchedule(timeTestStartDate, timeTest);
                });
            });

            function setDateTimeToTestEndSchedule(timeTestStartDate, timeTest) {
                if (timeTest > 0 && timeTestStartDate != null) {
                    var d = new Date(timeTestStartDate);
                    d.setMinutes(d.getMinutes() + timeTest * 3);
                    $('#TestEndSchedule').val(new Date(d.getTime() - d.getTimezoneOffset() * 60000).toISOString().substring(0, 19));
                } else {
                    $('#TestEndSchedule').val('');
                }
            }

            function myFunctionSubmit() {
                document.getElementById("TestEndSchedule").disabled = false;
            }
        </script>*@
}